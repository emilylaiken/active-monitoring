use Mix.Config

# For production, we configure the host to read the PORT
# from the system environment. Therefore, you will need
# to set PORT=80 before running your server.
#
# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :active_monitoring, ActiveMonitoring.Endpoint,
  http: [port: {:system, "PORT"}],
  url: [host: {:system, "HOST"}, scheme: "https", port: 443],
  cache_static_manifest: "priv/static/manifest.json",
  force_ssl: [rewrite_on: [:x_forwarded_proto], host: nil]

# Print debug messages in production
config :logger, level: :debug

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :active_monitoring, ActiveMonitoring.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :active_monitoring, ActiveMonitoring.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :active_monitoring, ActiveMonitoring.Endpoint, server: true
#

config :active_monitoring, ActiveMonitoring.Repo,
  secret_key_base: System.get_env("SECRET_KEY_BASE")

# Configure your database
config :active_monitoring, ActiveMonitoring.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: System.get_env("DATABASE_USER") || "active_monitoring",
  password: System.get_env("DATABASE_PASS") || "",
  database: System.get_env("DATABASE_NAME") || "active_monitoring",
  hostname: System.get_env("DATABASE_HOST") || "localhost",
  pool_size: 20

smtp_config = [
  adapter: Swoosh.Adapters.SMTP,
  relay: {:system, "SMTP_SERVER"},
  port: {:system, "SMTP_PORT"},
  username: {:system, "SMTP_USER"},
  password: {:system, "SMTP_PASS"},
  tls: :always, # can be `:always` or `:never`
  ssl: false, # can be `true`
  retries: 1
]

config :active_monitoring, ActiveMonitoring.Mailer, smtp_config
config :coherence, ActiveMonitoring.Coherence.Mailer, smtp_config

config :coherence,
  email_from_name: System.get_env("EMAIL_FROM_NAME"),
  email_from_email: System.get_env("EMAIL_FROM_EMAIL")
